"use strict";(self.webpackChunkstudy_note=self.webpackChunkstudy_note||[]).push([[985],{7934:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-f0612c60",path:"/vue/vueReactive/scheduler.html",title:"scheduler的处理",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[],filePathRelative:"vue/vueReactive/scheduler.md",git:{updatedTime:1635061168e3}}},4797:(n,s,a)=>{a.r(s),a.d(s,{default:()=>t});const p=(0,a(6252).uE)('<h1 id="scheduler的处理" tabindex="-1"><a class="header-anchor" href="#scheduler的处理" aria-hidden="true">#</a> scheduler的处理</h1><p>流程：当依赖调用<code>notify</code>的时候会顺序调用<code>watcher</code>中的<code>update</code>，因为渲染函数中的wacher不包含，options所以最终会调用<code>queueWatcher</code>， 而它最终通过各种判断就调用了<code>flushSchedulerQueue</code></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>\n<span class="token keyword">function</span> <span class="token function">flushSchedulerQueue</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  currentFlushTimestamp <span class="token operator">=</span> <span class="token function">getNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  flushing <span class="token operator">=</span> <span class="token boolean">true</span>\n  <span class="token keyword">let</span> watcher<span class="token punctuation">,</span> id\n\n  <span class="token comment">// Sort queue before flush.</span>\n  <span class="token comment">// This ensures that:</span>\n  <span class="token comment">// 1. Components are updated from parent to child. (because parent is always</span>\n  <span class="token comment">//    created before the child)</span>\n  <span class="token comment">// 2. A component&#39;s user watchers are run before its render watcher (because</span>\n  <span class="token comment">//    user watchers are created before the render watcher)</span>\n  <span class="token comment">// initState在_init之前执行</span>\n  <span class="token comment">// 3. If a component is destroyed during a parent component&#39;s watcher run,</span>\n  <span class="token comment">//    its watchers can be skipped.</span>\n  <span class="token comment">// 从小到大，排列watcher</span>\n  queue<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>id <span class="token operator">-</span> b<span class="token punctuation">.</span>id<span class="token punctuation">)</span>\n\n  <span class="token comment">// do not cache length because more watchers might be pushed</span>\n  <span class="token comment">// as we run existing watchers</span>\n  <span class="token comment">// 不要缓存length， 因为queue在操作过程中可能继续增加</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span>index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> queue<span class="token punctuation">.</span>length<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    watcher <span class="token operator">=</span> queue<span class="token punctuation">[</span>index<span class="token punctuation">]</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>watcher<span class="token punctuation">.</span>before<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 在渲染中调用， beforeUpdate</span>\n      watcher<span class="token punctuation">.</span><span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    id <span class="token operator">=</span> watcher<span class="token punctuation">.</span>id\n    has<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span>\n    watcher<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token comment">// in dev build, check and stop circular updates.</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">!==</span> <span class="token string">&#39;production&#39;</span> <span class="token operator">&amp;&amp;</span> has<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      circular<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>circular<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>circular<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token constant">MAX_UPDATE_COUNT</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">warn</span><span class="token punctuation">(</span>\n          <span class="token string">&#39;You may have an infinite update loop &#39;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>\n            watcher<span class="token punctuation">.</span>user\n              <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">in watcher with expression &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>watcher<span class="token punctuation">.</span>expression<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span><span class="token template-punctuation string">`</span></span>\n              <span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">in a component render function.</span><span class="token template-punctuation string">`</span></span>\n          <span class="token punctuation">)</span><span class="token punctuation">,</span>\n          watcher<span class="token punctuation">.</span>vm\n        <span class="token punctuation">)</span>\n        <span class="token keyword">break</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br></div></div>',3),e={},t=(0,a(3744).Z)(e,[["render",function(n,s){return p}]])},3744:(n,s)=>{s.Z=(n,s)=>{for(const[a,p]of s)n[a]=p;return n}}}]);