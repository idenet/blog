"use strict";(self.webpackChunkstudy_note=self.webpackChunkstudy_note||[]).push([[8708],{6884:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-9ecc8b40",path:"/vue/example/async_comp.html",title:"异步组件",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"初始化",slug:"初始化",children:[]},{level:2,title:"执行 resolve",slug:"执行-resolve",children:[]},{level:2,title:"其他例子",slug:"其他例子",children:[]},{level:2,title:"总结",slug:"总结",children:[]}],filePathRelative:"vue/example/async_comp.md",git:{updatedTime:1642068115e3}}},2779:(n,s,a)=>{a.r(s),a.d(s,{default:()=>o});const p=(0,a(6252).uE)('<h1 id="异步组件" tabindex="-1"><a class="header-anchor" href="#异步组件" aria-hidden="true">#</a> 异步组件</h1><p>讲完组件，那么正好下面来看看异步组件。异步组件在项目开发中很重要。结合<code>webpack</code>的<code>code-spliting</code>就能让组件打包成的<code>js</code>异步加载，达到浏览器加载优化的目的，提高页面渲染速度。 因为是配合<code>webpack</code>使用，所以我们需要用<code>vue-cli</code>创建一个最基本的项目，那么好首先我们看这么一个例子</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">&#39;HelloWorld&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 这个特殊的 `require` 语法将会告诉 webpack</span>\n  <span class="token comment">// 自动将你的构建代码切割成多个包，这些包</span>\n  <span class="token comment">// 会通过 Ajax 请求加载</span>\n  <span class="token function">require</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;./components/HelloWorld.vue&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> resolve<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token parameter">h</span> <span class="token operator">=&gt;</span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>我们把<code>demo</code>中<code>App</code>组件的局部注册删除，然后全局注册，上面是例子代码。</p><p>例子准备好了，接下来我们要想一想入口在哪里。打开<code>package-json</code>我们看到，它是通过<code>vue-cli-service</code>启动的，显然我们要找到启动文件。 在<code>node_modules</code>中，我们看<code>.bin</code>目录，在<code>.bin</code>目录下我们能找到<code>vue-cli-service</code>脚本文件。在这里我们能看到他的执行目录是<code>@vue/cli-service/bin/vue-cli-service.js</code>。 找的过程就不细描述了，我们直接看<code>config/base.js</code>里的代码</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>webpackConfig<span class="token punctuation">.</span>resolve\n  <span class="token punctuation">.</span>alias\n    <span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>\n      <span class="token string">&#39;vue$&#39;</span><span class="token punctuation">,</span>\n      options<span class="token punctuation">.</span>runtimeCompiler\n        <span class="token operator">?</span> <span class="token string">&#39;vue/dist/vue.esm.js&#39;</span>\n        <span class="token operator">:</span> <span class="token string">&#39;vue/dist/vue.runtime.esm.js&#39;</span>\n    <span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>很简单如果我们开启了<code>runtimeCompiler</code>选项引入的就是<code>vue.esm.js</code>，否则就是<code>vue.runtime.esm.js</code>。两者差别就是是否存在<code>compiler</code>了。</p><p>引入的<code>vue</code>源码知道在哪里了，现在我们想想异步组件的入口在哪里。首先在上一篇文章中我们知道，创建异步组件会走<code>createComponent</code>方法，这个方法在<code>vdom/create-component</code>文件中， 显然现在我们只要在<code>createComponent</code>的开头写上<code>debugger</code>就能在开发状态进入调试模式了</p><h2 id="初始化" tabindex="-1"><a class="header-anchor" href="#初始化" aria-hidden="true">#</a> 初始化</h2><p>在这里我们全局注册的时候，第二个参数是一个方法而不是对象，所以我们在执行<code>initAssetRegisters</code>方法的时候，当<code>type=component</code>的时候</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">&#39;component&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isPlainObject</span><span class="token punctuation">(</span>definition<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  definition<span class="token punctuation">.</span>name <span class="token operator">=</span> definition<span class="token punctuation">.</span>name <span class="token operator">||</span> id\n  definition <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>_base<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span>definition<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>看上面<code>isPlainObject</code>是<code>false</code>，那么<code>vue</code>就不会执行里面的代码。然后我们再看<code>createComponent</code>方法。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 创建子组件</span>\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createComponent</span> <span class="token punctuation">(</span>\n  <span class="token parameter">Ctor<span class="token operator">:</span> Class<span class="token operator">&lt;</span>Component<span class="token operator">&gt;</span> <span class="token operator">|</span> Function <span class="token operator">|</span> Object <span class="token operator">|</span> <span class="token keyword">void</span><span class="token punctuation">,</span>\n  data<span class="token operator">:</span> <span class="token operator">?</span>VNodeData<span class="token punctuation">,</span>\n  context<span class="token operator">:</span> Component<span class="token punctuation">,</span>\n  children<span class="token operator">:</span> <span class="token operator">?</span>Array<span class="token operator">&lt;</span>VNode<span class="token operator">&gt;</span><span class="token punctuation">,</span>\n  tag<span class="token operator">?</span><span class="token operator">:</span> string</span>\n<span class="token punctuation">)</span><span class="token operator">:</span> VNode <span class="token operator">|</span> Array<span class="token operator">&lt;</span>VNode<span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>\n\n  <span class="token comment">// 异步组件</span>\n  <span class="token keyword">let</span> asyncFactory\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isUndef</span><span class="token punctuation">(</span>Ctor<span class="token punctuation">.</span>cid<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    asyncFactory <span class="token operator">=</span> Ctor\n    <span class="token comment">// 组件构造工厂函数  Vue</span>\n    Ctor <span class="token operator">=</span> <span class="token function">resolveAsyncComponent</span><span class="token punctuation">(</span>asyncFactory<span class="token punctuation">,</span> baseCtor<span class="token punctuation">)</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>Ctor <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token function">createAsyncPlaceholder</span><span class="token punctuation">(</span>\n        asyncFactory<span class="token punctuation">,</span>\n        data<span class="token punctuation">,</span>\n        context<span class="token punctuation">,</span>\n        children<span class="token punctuation">,</span>\n        tag\n      <span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> vnode\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><p>可以看到 <code>Ctor</code>我们这里传入的是<code>function</code>，且是没有执行过<code>extend</code>的。所以它不存在<code>cid</code>，也就是进入了这里面的语句。入口分析完了，那么我们看里面的方法 首先是<code>resolveAsyncComponent</code>。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">resolveAsyncComponent</span> <span class="token punctuation">(</span>\n  <span class="token parameter">factory<span class="token operator">:</span> Function<span class="token punctuation">,</span>\n  baseCtor<span class="token operator">:</span> Class<span class="token operator">&lt;</span>Component<span class="token operator">&gt;</span></span>\n<span class="token punctuation">)</span><span class="token operator">:</span> Class<span class="token operator">&lt;</span>Component<span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> owner <span class="token operator">=</span> currentRenderingInstance\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>owner <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isDef</span><span class="token punctuation">(</span>factory<span class="token punctuation">.</span>owners<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> owners <span class="token operator">=</span> factory<span class="token punctuation">.</span>owners <span class="token operator">=</span> <span class="token punctuation">[</span>owner<span class="token punctuation">]</span>\n    <span class="token keyword">let</span> sync <span class="token operator">=</span> <span class="token boolean">true</span>\n    <span class="token keyword">let</span> timerLoading <span class="token operator">=</span> <span class="token keyword">null</span>\n    <span class="token keyword">let</span> timerTimeout <span class="token operator">=</span> <span class="token keyword">null</span>\n\n    <span class="token punctuation">;</span><span class="token punctuation">(</span>owner<span class="token operator">:</span> any<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">&#39;hook:destroyed&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">remove</span><span class="token punctuation">(</span>owners<span class="token punctuation">,</span> owner<span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n    <span class="token keyword">const</span> <span class="token function-variable function">forceRender</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">renderCompleted<span class="token operator">:</span> boolean</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n    <span class="token keyword">const</span> resolve <span class="token operator">=</span> <span class="token function">once</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res<span class="token operator">:</span> Object <span class="token operator">|</span> Class<span class="token operator">&lt;</span>Component<span class="token operator">&gt;</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token comment">// 用回调函数的方式</span>\n    <span class="token keyword">const</span> reject <span class="token operator">=</span> <span class="token function">once</span><span class="token punctuation">(</span><span class="token parameter">reason</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>\n\n    sync <span class="token operator">=</span> <span class="token boolean">false</span>\n\n    <span class="token keyword">return</span> factory<span class="token punctuation">.</span>loading\n      <span class="token operator">?</span> factory<span class="token punctuation">.</span>loadingComp\n      <span class="token operator">:</span> factory<span class="token punctuation">.</span>resolved\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><p><code>currentRenderingInstance</code>获取当前渲染实例，也就是<code>App</code>的实例。该方法较长，我们先删除该例子下 现阶段无关的代码只看核心，第一次使用<code>factory.owners</code>可定是不存在的。所以会进入<code>if</code>。</p><p>在里面我们首先声明了很多属性，主要就是声明了<code>resolve</code>和<code>reject</code>函数，并且他们只执行一次。当执行到<code>factory(resolve, reject)</code>的时候，其实们是执行了定义函数，也就是说我们要执行</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">require</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;./components/HelloWorld.vue&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> resolve<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><code>require</code>是<code>webpack</code>的方法，因此我们将进入<code>webpack</code>进行执行。通过上面的<code>resolve</code>和<code>reject</code>函数我们可以猜测，<code>require</code>肯定是<code>new</code>了一个<code>Promise</code>。</p><p>确实如此，在<code>webpack</code>里的代码，就是<code>new Promise</code>，然后动态创建一个<code>script</code>后。然后回到之后的流程继续执行。在一大段的<code>if</code>语句判断中，其实现在是不执行的因为没有返回值，当前的<code>res</code>是空。所以当前就是执行了后两段代码。<code>sync = false</code>并且返回<code>factory.resolved</code></p><p>然而当前<code>factory.resolved</code>是<code>undefined</code>，所以看<code>createComponent</code>方法</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>Ctor <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token function">createAsyncPlaceholder</span><span class="token punctuation">(</span>asyncFactory<span class="token punctuation">,</span> data<span class="token punctuation">,</span> context<span class="token punctuation">,</span> children<span class="token punctuation">,</span> tag<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>也就是进入<code>createAsyncPlaceholder</code>，看名字是创建了一个异步的<code>Placeholder</code>。我们看代码</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createAsyncPlaceholder</span> <span class="token punctuation">(</span>\n  <span class="token parameter">factory<span class="token operator">:</span> Function<span class="token punctuation">,</span>\n  data<span class="token operator">:</span> <span class="token operator">?</span>VNodeData<span class="token punctuation">,</span>\n  context<span class="token operator">:</span> Component<span class="token punctuation">,</span>\n  children<span class="token operator">:</span> <span class="token operator">?</span>Array<span class="token operator">&lt;</span>VNode<span class="token operator">&gt;</span><span class="token punctuation">,</span>\n  tag<span class="token operator">:</span> <span class="token operator">?</span>string</span>\n<span class="token punctuation">)</span><span class="token operator">:</span> VNode <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> node <span class="token operator">=</span> <span class="token function">createEmptyVNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  node<span class="token punctuation">.</span>asyncFactory <span class="token operator">=</span> factory\n  node<span class="token punctuation">.</span>asyncMeta <span class="token operator">=</span> <span class="token punctuation">{</span> data<span class="token punctuation">,</span> context<span class="token punctuation">,</span> children<span class="token punctuation">,</span> tag <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> node\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>很简单，<code>vue</code>创建了一个空的<code>vnode</code>，然后吧参数赋值给了<code>vnode</code>。当执行到<code>insert</code>节点之后我们能看到 <code>console</code>的元素页面内是</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Vue logo<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/img/logo.82b9c7a5.png<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n  <span class="token comment">&lt;!----&gt;</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>看在组件区域存在一注释节点。并且在<code>network</code>我们可以看到一个空的<code>0.js</code>。这样初始化流程结束</p><h2 id="执行-resolve" tabindex="-1"><a class="header-anchor" href="#执行-resolve" aria-hidden="true">#</a> 执行 resolve</h2><p>这里我们在<code>resolve</code>函数内部打个断点，然后看调用堆栈。上面有个大大的<code>Promise.then</code>异步，然后就会执行到 <code>resolve</code>函数。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> resolve <span class="token operator">=</span> <span class="token function">once</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res<span class="token operator">:</span> Object <span class="token operator">|</span> Class<span class="token operator">&lt;</span>Component<span class="token operator">&gt;</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  factory<span class="token punctuation">.</span>resolved <span class="token operator">=</span> <span class="token function">ensureCtor</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> baseCtor<span class="token punctuation">)</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>sync<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">forceRender</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    owners<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">function</span> <span class="token function">ensureCtor</span> <span class="token punctuation">(</span><span class="token parameter">comp<span class="token operator">:</span> any<span class="token punctuation">,</span> base</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>\n    comp<span class="token punctuation">.</span>__esModule <span class="token operator">||</span>\n    <span class="token punctuation">(</span>hasSymbol <span class="token operator">&amp;&amp;</span> comp<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>toStringTag<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&#39;Module&#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    comp <span class="token operator">=</span> comp<span class="token punctuation">.</span>default\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> <span class="token function">isObject</span><span class="token punctuation">(</span>comp<span class="token punctuation">)</span>\n    <span class="token operator">?</span> base<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span>comp<span class="token punctuation">)</span>\n    <span class="token operator">:</span> comp\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>这个方法很简单</p><ol><li>执行<code>ensureCtor</code>，该方法就是通过拿到的组件对象执行<code>Vue.extend</code>初始化子组件构造函数。</li><li>当前<code>sync</code>是<code>false</code>。所以我们会执行<code>forceRender(true)</code></li></ol><p><code>forceRender</code>很简单，我们看代码</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">forceRender</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">renderCompleted</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> l <span class="token operator">=</span> owners<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n     owners<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">$forceUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n   <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>这里我们拿到闭包保存的<code>owners[i]</code>，当前只有一个也就是<code>App</code>实例。那么后面就是<code>this.$forceUpdate</code>的执行了。重新运行<code>watcher.update</code>进行页面更新。这时候我们可以拿到子组件实例了，也就是进行正常的<code>createComponent</code>流程，渲染到页面上</p><h2 id="其他例子" tabindex="-1"><a class="header-anchor" href="#其他例子" aria-hidden="true">#</a> 其他例子</h2><p>一般来说我们不会使用上面的方法，他有更好基于<code>es2015</code>的书写方式</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">&#39;HelloWorld&#39;</span><span class="token punctuation">,</span>\n  <span class="token comment">// 该 import 函数返回一个 promise 对象</span>\n  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token comment">/* webpackChunkName: &quot;HelloWorld&quot; */</span><span class="token string">&#39;./components/HelloWorld.vue&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>在这个例子中需要注意的是 我们有返回值，这个返回值是<code>webpack</code>处理后返回的，就是<code>Promise</code>。既然有返回值，那么在下面代码中</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code> <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>\n <span class="token comment">// 如果是一个promise</span>\n <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isObject</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isPromise</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n     <span class="token comment">// () =&gt; Promise</span>\n     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isUndef</span><span class="token punctuation">(</span>factory<span class="token punctuation">.</span>resolved<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n       res<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>\n     <span class="token punctuation">}</span>\n   <span class="token punctuation">}</span>\n <span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>显然我们会运行到<code>res.then</code>方法，也就会执行到我们定义的<code>resolve</code>，之后的代码是一样的。</p><p>在官方文档中还有一个例子</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 第三种写法 高级异步组件</span>\n<span class="token keyword">const</span> <span class="token function-variable function">AsyncComp</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token comment">// 需要加载的组件。应当是一个 Promise</span>\n  component<span class="token operator">:</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;./components/HelloWorld.vue&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token comment">// 加载中应当渲染的组件</span>\n  loading<span class="token operator">:</span> LoadingComp<span class="token punctuation">,</span>\n  <span class="token comment">// 出错时渲染的组件</span>\n  error<span class="token operator">:</span> ErrorComp<span class="token punctuation">,</span>\n  <span class="token comment">// 渲染加载中组件前的等待时间。默认：200ms。</span>\n  delay<span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>\n  <span class="token comment">// 最长等待时间。超出此时间则渲染错误组件。默认：Infinity</span>\n  timeout<span class="token operator">:</span> <span class="token number">3000</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> LoadingComp <span class="token operator">=</span> <span class="token punctuation">{</span>\n  template<span class="token operator">:</span> <span class="token string">&#39;&lt;div&gt;loading&lt;/div&gt;&#39;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> ErrorComp <span class="token operator">=</span> <span class="token punctuation">{</span>\n  template<span class="token operator">:</span> <span class="token string">&#39;&lt;div&gt;error&lt;/div&gt;&#39;</span>\n<span class="token punctuation">}</span>\nVue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">&#39;HelloWorld&#39;</span><span class="token punctuation">,</span> AsyncComp<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>这个语法是新增的，代码的执行其实很简单就是判断<code>promise</code>的执行情况。在源码中也很简单，相信都能看明白。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>如果这时候有面试官问：<strong>vue的异步组件是如何执行的？</strong></p><p>就能回答异步组件和名字一样，其实就是通过<code>webpack</code>创建的<code>promise</code>等执行到<code>then</code>的时候去初始化子组件构造函数，然后在执行当前实例也就是父组件实例的<code>$foreUpdate</code>去重新渲染。</p>',47),e={},o=(0,a(3744).Z)(e,[["render",function(n,s){return p}]])},3744:(n,s)=>{s.Z=(n,s)=>{for(const[a,p]of s)n[a]=p;return n}}}]);