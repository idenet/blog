"use strict";(self.webpackChunkstudy_note=self.webpackChunkstudy_note||[]).push([[9258],{2491:(a,e,s)=>{s.r(e),s.d(e,{data:()=>n});const n={key:"v-a6fec9e0",path:"/review/html.html",title:"HTML 基础",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"src和href的区别",slug:"src和href的区别",children:[]},{level:2,title:"对html语义化的理解",slug:"对html语义化的理解",children:[]},{level:2,title:"doctype的作用",slug:"doctype的作用",children:[]},{level:2,title:"script 标签中的 defer 和 async",slug:"script-标签中的-defer-和-async",children:[]},{level:2,title:"常用的meta标签有哪些",slug:"常用的meta标签有哪些",children:[]},{level:2,title:"html5 有哪些更新",slug:"html5-有哪些更新",children:[]},{level:2,title:"img 的 srcset 属性的作用",slug:"img-的-srcset-属性的作用",children:[]},{level:2,title:"行内元素 块级元素 空元素",slug:"行内元素-块级元素-空元素",children:[]},{level:2,title:"webwork",slug:"webwork",children:[]},{level:2,title:"html5 离线存储",slug:"html5-离线存储",children:[]},{level:2,title:"浏览器是如何对HTML5的离线存储资源进行管理和加载",slug:"浏览器是如何对html5的离线存储资源进行管理和加载",children:[]},{level:2,title:"iframe的优缺点",slug:"iframe的优缺点",children:[]},{level:2,title:"title 与 h1 的区别、b 与 strong 的区别、i 与 em 的区别？",slug:"title-与-h1-的区别、b-与-strong-的区别、i-与-em-的区别",children:[]},{level:2,title:"label标签的作用，如何使用",slug:"label标签的作用-如何使用",children:[]},{level:2,title:"canvas 和 svg 的区别",slug:"canvas-和-svg-的区别",children:[]},{level:2,title:"head标签的作用，其中什么必不可少",slug:"head标签的作用-其中什么必不可少",children:[]},{level:2,title:"文档声明（Doctype）和<!Doctype html>有何作用? 严格模式与混杂模式如何区分？它们有何意义?",slug:"文档声明-doctype-和-doctype-html-有何作用-严格模式与混杂模式如何区分-它们有何意义",children:[]},{level:2,title:"渐进增强和优雅降级之间的区别",slug:"渐进增强和优雅降级之间的区别",children:[]},{level:2,title:"",slug:"",children:[]}],filePathRelative:"review/html.md",git:{updatedTime:1641478785e3}}},353:(a,e,s)=>{s.r(e),s.d(e,{default:()=>l});const n=(0,s(6252).uE)('<h1 id="html-基础" tabindex="-1"><a class="header-anchor" href="#html-基础" aria-hidden="true">#</a> HTML 基础</h1><h2 id="src和href的区别" tabindex="-1"><a class="header-anchor" href="#src和href的区别" aria-hidden="true">#</a> src和href的区别</h2><p><code>src</code>表示对资源的引用，会将指向的资源下载并替换当前内容。当浏览器解析遇到<code>src</code>会暂停其他资源的下载和处理，直到将该资源加载或执行完毕，这也是<code>script</code>放在底部的原因</p><p>href表示超文本引用，它指向网络资源。当浏览器识别到它的时候，会并行下载资源，不会停止对当前文档的处理</p><h2 id="对html语义化的理解" tabindex="-1"><a class="header-anchor" href="#对html语义化的理解" aria-hidden="true">#</a> 对html语义化的理解</h2><p>语义化就是用正确的标签做正确的事情。</p><p>优点有：</p><ul><li>对seo友好，支持读屏软件。</li><li>对开发者友好，开发者能清晰的看出网页结构，便于开发团队的维护</li></ul><p>常见的语义化标签有<code>header nav section main article aside footer</code>等</p><h2 id="doctype的作用" tabindex="-1"><a class="header-anchor" href="#doctype的作用" aria-hidden="true">#</a> doctype的作用</h2><p>doctype是告诉浏览器应该以什么样的文档类型定义来解析文档，不同的渲染模式会影响浏览器对<code>css</code>代码甚至<code>js</code>脚本解析。 浏览器渲染页面的两种模式，可以通过<code>document.compatMode</code>获取</p><ul><li>CSS1Compat：标准模式 浏览器以其支持的最高标准呈现页面</li><li>backCompat：怪异模式（混杂模式） 页面以一种比较宽松的向后兼容的方式显示</li></ul><h2 id="script-标签中的-defer-和-async" tabindex="-1"><a class="header-anchor" href="#script-标签中的-defer-和-async" aria-hidden="true">#</a> script 标签中的 defer 和 async</h2><p>这两个属性都是去异步加载外部的js脚本，区别在于</p><ul><li>执行顺序，<code>async</code>不能保证加载顺序，<code>defer</code>会按照顺序加载</li><li><code>async</code>表示后续文档的加载和js脚本的执行是并行的，<code>defer</code>的js脚本会等到所有文档元素加载完成后执行，<code>DOMContentLoaded</code>事件触发之前</li></ul><h2 id="常用的meta标签有哪些" tabindex="-1"><a class="header-anchor" href="#常用的meta标签有哪些" aria-hidden="true">#</a> 常用的<code>meta</code>标签有哪些</h2><p><code>meta</code>标签用来描述网页文档的属性，常用的<code>meta</code>标签有哪些</p><ol><li>charset 用来描述文档编码类型</li><li>keywords 页面关键字 用于seo</li><li>description 页面描述 用于seo</li><li>refresh 页面重定向和刷新 <code>&lt;meta http-equiv=&quot;refresh&quot; content=&quot;0;url=&quot; /&gt;</code></li><li>viewpoit 控制窗口大小和比例 适配移动设备</li><li>robots 搜索引擎索引方式 <ol><li>all 文件将被检索，页面上的链接可以被查询</li><li>none 所有都不行</li><li>index 文件将被检索</li><li>follow 页面上的链接可以被查询</li><li>noindex 文件将不被检索</li><li>nofollow 页面上的链接不可被查询</li></ol></li></ol><h2 id="html5-有哪些更新" tabindex="-1"><a class="header-anchor" href="#html5-有哪些更新" aria-hidden="true">#</a> html5 有哪些更新</h2><ol><li>语义化标签 <code>header nav section aside article footer</code></li><li>媒体标签 <code>audio video</code></li><li>表单 <ol><li>表单类型 <code>email url number search range color(颜色拾取器) time date datetime(只有safari支持) datetime-local week month</code></li><li>表单属性 <code>autocomplete=“on”</code> 或者 <code>autocomplete=“off”</code> 使用这个属性需要有两个前提：1. 表单必须提交过 2. 必须有<code>name</code>属性</li><li>表单事件 <code>oninput 、oninvalid</code></li></ol></li><li>进度条 <code>progress</code></li><li>剩余容量 <code>meter</code></li><li><code>DOM</code>查询操作 <code>document.querySelector() document.querySelectorAll()</code></li><li>web存储 <code>localstorage sessionStorage</code></li><li><code>canvas Geolocation websocket historyAPI</code></li><li>移除元素 <code>basefont big center font s strike tt u</code>和<code>frame frameset noframes</code></li></ol><h2 id="img-的-srcset-属性的作用" tabindex="-1"><a class="header-anchor" href="#img-的-srcset-属性的作用" aria-hidden="true">#</a> img 的 srcset 属性的作用</h2><p>使用这个属性能自动加载，不同屏幕密度下的图片，例如，其中 <code>340px</code>和<code>128px</code> 是表示图片宽度</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>image-128.png<span class="token punctuation">&quot;</span></span>\n     <span class="token attr-name">srcset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>image-128.png 128w, image-256.png 256w, image-512.png 512w<span class="token punctuation">&quot;</span></span>\n     <span class="token attr-name">sizes</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>(max-width: 360px) 340px, 128px<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>还有另一种写法</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>picture</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">media</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>(max-width: 799px)<span class="token punctuation">&quot;</span></span> <span class="token attr-name">srcset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>elva-480w-close-portrait.jpg<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">media</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>(min-width: 800px)<span class="token punctuation">&quot;</span></span> <span class="token attr-name">srcset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>elva-800w.jpg<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>elva-800w.jpg<span class="token punctuation">&quot;</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Chris standing up holding his daughter Elva<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>picture</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="行内元素-块级元素-空元素" tabindex="-1"><a class="header-anchor" href="#行内元素-块级元素-空元素" aria-hidden="true">#</a> 行内元素 块级元素 空元素</h2><ol><li><code>a b span img input select strong</code></li><li><code>div ul li dl dt dd h1-6 p</code></li><li><code>br hr img input link meta</code></li></ol><h2 id="webwork" tabindex="-1"><a class="header-anchor" href="#webwork" aria-hidden="true">#</a> webwork</h2><p>webwork独立于其他<code>js</code>脚本，不会影响页面性能，并且通过<code>postmessage</code>将结果传回主线程，这样在进行复杂计算的时候就不会阻塞主线程</p><h2 id="html5-离线存储" tabindex="-1"><a class="header-anchor" href="#html5-离线存储" aria-hidden="true">#</a> html5 离线存储</h2><p>在用户没有网络时，可以正常访问站点或者应用，在连接网络时，再去更新用户机器上的缓存文件</p><p>**原理：**HTML5的离线缓存基于一个新建的<code>.appcache</code>文件的缓存机制(不是存储技术)，通过这个文件上的解析清单离线存储资源，之后当网络处于离线就会使用这些资源</p><p><strong>使用方法</strong></p><ol><li>创建一个和html同名的mainfest文件，然后在页面头部加入该属性</li></ol><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">&quot;en&quot;</span> manifest<span class="token operator">=</span><span class="token string">&quot;index.manifest&quot;</span><span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ol start="2"><li>在<code>index.mainfest</code>文件中编写需要离线存储的资源</li></ol><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token constant">CACHE</span> <span class="token constant">MANIFEST</span>\n #v0<span class="token punctuation">.</span><span class="token number">11</span>\n <span class="token constant">CACHE</span><span class="token operator">:</span> <span class="token comment">// 资源列表</span>\n js<span class="token operator">/</span>app<span class="token punctuation">.</span>js\n css<span class="token operator">/</span>style<span class="token punctuation">.</span>css\n <span class="token constant">NETWORK</span><span class="token operator">:</span> <span class="token comment">// 表示只有在在线情况下才能访问</span>\n resourse<span class="token operator">/</span>logo<span class="token punctuation">.</span>png\n <span class="token constant">FALLBACK</span><span class="token operator">:</span> <span class="token comment">// 如果访问失败就访问这个</span>\n <span class="token operator">/</span> <span class="token operator">/</span>offline<span class="token punctuation">.</span>html\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><ol start="3"><li>在离线状态时，操作<code>window.applicationCache</code>进行离线缓存的操作</li></ol><p><strong>如何更新</strong></p><ol><li>更新 mainfest文件</li><li>通过js 操作</li><li>清除浏览器缓存</li></ol><h2 id="浏览器是如何对html5的离线存储资源进行管理和加载" tabindex="-1"><a class="header-anchor" href="#浏览器是如何对html5的离线存储资源进行管理和加载" aria-hidden="true">#</a> 浏览器是如何对HTML5的离线存储资源进行管理和加载</h2><ol><li>在线情况下，如果是第一次，会根据<code>mainfest</code>文件的内容下载相应资源并进行存储，如果已有，则会使用离线资源加载页面。然后浏览器会比对新旧mainfest文件，如果有改变，就会重新下载资源</li><li>离线情况下，直接使用离线资源</li></ol><h2 id="iframe的优缺点" tabindex="-1"><a class="header-anchor" href="#iframe的优缺点" aria-hidden="true">#</a> iframe的优缺点</h2><p>iframe会创建一个包含另外一个文档的内联框架</p><p>优点：用来加载速度比较慢的内容（广告），可以使用脚本并行下载，可以实现跨字域通信 缺点：iframe会阻塞主页面的onload事件 无法被搜索引擎识别 产生很多页面不容易管理</p><h2 id="title-与-h1-的区别、b-与-strong-的区别、i-与-em-的区别" tabindex="-1"><a class="header-anchor" href="#title-与-h1-的区别、b-与-strong-的区别、i-与-em-的区别" aria-hidden="true">#</a> title 与 h1 的区别、b 与 strong 的区别、i 与 em 的区别？</h2><ul><li>strong标签有语义，更利于seo，</li><li>h1 也是对seo更加重要 title没有明确意义</li><li>i表示斜体， em表示强调的文本</li></ul><h2 id="label标签的作用-如何使用" tabindex="-1"><a class="header-anchor" href="#label标签的作用-如何使用" aria-hidden="true">#</a> label标签的作用，如何使用</h2><p>label用来定义表单控件的关系，当用户选择label，浏览器会将焦点自动转到相关表单上</p><h2 id="canvas-和-svg-的区别" tabindex="-1"><a class="header-anchor" href="#canvas-和-svg-的区别" aria-hidden="true">#</a> canvas 和 svg 的区别</h2><p>svg 可缩放矢量图形是基于可扩展标记语言xml描述的2d图形语言</p><ol><li>不依赖分辨率</li><li>支持事件处理器</li><li>不适合游戏</li></ol><p>canvas画布 通过js绘制2d图形，是逐像素渲染的。位置发生改变就会重新绘制</p><ol><li>依赖分辨率</li><li>不支持事件处理器</li><li>弱文本渲染能力</li><li>能够以png或者jpg格式来保存图像结果</li><li>适合游戏</li></ol><h2 id="head标签的作用-其中什么必不可少" tabindex="-1"><a class="header-anchor" href="#head标签的作用-其中什么必不可少" aria-hidden="true">#</a> head标签的作用，其中什么必不可少</h2><p>标签用于定义文档的头部，是所有头部元素的容器。其中<code>title</code>是必不可少的</p><h2 id="文档声明-doctype-和-doctype-html-有何作用-严格模式与混杂模式如何区分-它们有何意义" tabindex="-1"><a class="header-anchor" href="#文档声明-doctype-和-doctype-html-有何作用-严格模式与混杂模式如何区分-它们有何意义" aria-hidden="true">#</a> 文档声明（Doctype）和<code>&lt;!Doctype html&gt;</code>有何作用? 严格模式与混杂模式如何区分？它们有何意义?</h2><p>文档模式告诉了浏览器用何种格式来解析。<code>&lt;!Doctype html&gt;</code>表示使用html5标准来解析页面。如果不写会进入混杂模式</p><ul><li>严格模式：标准模式 按照标准来解析</li><li>混杂模式 通常用来模拟老式浏览器的行为</li></ul><h2 id="渐进增强和优雅降级之间的区别" tabindex="-1"><a class="header-anchor" href="#渐进增强和优雅降级之间的区别" aria-hidden="true">#</a> 渐进增强和优雅降级之间的区别</h2><ul><li>优雅降级 一开始就构建完整的功能，然后针对浏览器去兼容</li><li>渐进增强 主要针对低级浏览器进行功能开发，在保证基本功能的情况下，在针对高级浏览器进行效果和交互功能的改进</li></ul><h2 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a></h2>',62),t={},l=(0,s(3744).Z)(t,[["render",function(a,e){return n}]])},3744:(a,e)=>{e.Z=(a,e)=>{for(const[s,n]of e)a[s]=n;return a}}}]);