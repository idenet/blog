"use strict";(self.webpackChunkstudy_note=self.webpackChunkstudy_note||[]).push([[955],{5579:(n,e,s)=>{s.r(e),s.d(e,{data:()=>a});const a={key:"v-0283650b",path:"/micro-front/intro/",title:"",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"微前端概述",slug:"微前端概述",children:[]},{level:2,title:"微前端的价值",slug:"微前端的价值",children:[{level:3,title:"增量迁移",slug:"增量迁移",children:[]},{level:3,title:"独立发布",slug:"独立发布",children:[]},{level:3,title:"允许单个团队做出技术决策",slug:"允许单个团队做出技术决策",children:[]}]},{level:2,title:"如何实现微前端",slug:"如何实现微前端",children:[{level:3,title:"多个微应用如何进行组合？",slug:"多个微应用如何进行组合",children:[]},{level:3,title:"在微应用中如何实现路由？",slug:"在微应用中如何实现路由",children:[]},{level:3,title:"微应用之间如何实现状态共享？",slug:"微应用之间如何实现状态共享",children:[]},{level:3,title:"微应用之间如何实现框架和库的共享",slug:"微应用之间如何实现框架和库的共享",children:[]}]},{level:2,title:"使用 single-spa@5.9.3",slug:"使用-single-spa-5-9-3",children:[{level:3,title:"跨应用通信",slug:"跨应用通信",children:[]}]},{level:2,title:"Layout Engine",slug:"layout-engine",children:[]}],filePathRelative:"micro-front/intro/readme.md",git:{updatedTime:1639231841e3}}},8474:(n,e,s)=>{s.r(e),s.d(e,{default:()=>l});const a=(0,s(6252).uE)('<h2 id="微前端概述" tabindex="-1"><a class="header-anchor" href="#微前端概述" aria-hidden="true">#</a> 微前端概述</h2><p>微前端是一种软件架构，可以将前端应用拆解成一些更小的能够独立开发部署的微型应用，然后再将这 些微应用进行组合使其成为整体应用的架构模式。</p><p>微前端架构类似于组件架构，但不同的是，组件不能独立构建和发布，但是微前端中的应用是可以的。</p><p>微前端架构与框架无关，每个微应用都可以使用不同的框架。</p><h2 id="微前端的价值" tabindex="-1"><a class="header-anchor" href="#微前端的价值" aria-hidden="true">#</a> 微前端的价值</h2><h3 id="增量迁移" tabindex="-1"><a class="header-anchor" href="#增量迁移" aria-hidden="true">#</a> 增量迁移</h3><p>一个项目的迁移是一项很艰巨的任务，开发时间很久的项目如果要迁移，需要的人力很难保证。但是经过2-3年的高速发展现有的技术却无法很好的 支持需求，项目组也希望使用新的技术，这时候使用微前端就能解决问题。 通过新项目和旧项目的整合来架构，就能很好的完成任务</p><h3 id="独立发布" tabindex="-1"><a class="header-anchor" href="#独立发布" aria-hidden="true">#</a> 独立发布</h3><p>在目前的单页应用架构中，使用组件构建用户界面，应用中的每个组件或功能开发完成或者bug修 复完成后，每次都需要对整个产品重新进行构建和发布，任务耗时操作上也比较繁琐。</p><p>在使用了微前端架构后，可以将不能的功能模块拆分成独立的应用，此时功能模块就可以单独构建 单独发布了，构建时间也会变得非常快，应用发布后不需要更改其他内容应用就会自动更新，这意 味着你可以进行频繁的构建发布操作了。</p><h3 id="允许单个团队做出技术决策" tabindex="-1"><a class="header-anchor" href="#允许单个团队做出技术决策" aria-hidden="true">#</a> 允许单个团队做出技术决策</h3><p>因为微前端构架与框架无关，当一个应用由多个团队进行开发时，每个团队都可以使用自己擅长的 技术栈进行开发，也就是它允许适当的让团队决策使用哪种技术，从而使团队协作变得不再僵硬。</p><p>因此微前端的使用场景就是：</p><ol><li>拆分巨型应用，使应用变得更加可维护</li><li>兼容历史应用，实现增量开发</li></ol><h2 id="如何实现微前端" tabindex="-1"><a class="header-anchor" href="#如何实现微前端" aria-hidden="true">#</a> 如何实现微前端</h2><h3 id="多个微应用如何进行组合" tabindex="-1"><a class="header-anchor" href="#多个微应用如何进行组合" aria-hidden="true">#</a> 多个微应用如何进行组合？</h3><p>每个微应用都需要注册到总的容器中，每个应用在浏览器中都是一个独立的模块，通过模块化的方式被容器应用 启动和运行。使用模块化的方式运行应用可以防止冲突</p><h3 id="在微应用中如何实现路由" tabindex="-1"><a class="header-anchor" href="#在微应用中如何实现路由" aria-hidden="true">#</a> 在微应用中如何实现路由？</h3><p>在微架构中，当路由发生变化时，容器首先会拦截路由的变化。根据路由匹配相应的微前端引用。当匹配到以后，再启动微应用路由，匹配具体的页面</p><h3 id="微应用之间如何实现状态共享" tabindex="-1"><a class="header-anchor" href="#微应用之间如何实现状态共享" aria-hidden="true">#</a> 微应用之间如何实现状态共享？</h3><p>通过发布订阅模式实现状态共享，如Rxjs</p><h3 id="微应用之间如何实现框架和库的共享" tabindex="-1"><a class="header-anchor" href="#微应用之间如何实现框架和库的共享" aria-hidden="true">#</a> 微应用之间如何实现框架和库的共享</h3><p>通过import-map和webpack中的externals属性</p><h2 id="使用-single-spa-5-9-3" tabindex="-1"><a class="header-anchor" href="#使用-single-spa-5-9-3" aria-hidden="true">#</a> 使用 single-spa@5.9.3</h2><p>使用<code>create-single-spa</code>创建一个<code>root</code>应用。该应用用来注册其他微前端应用，并且共享根html。 在这个根html中。可以注册全局共享的插件，比如react和vue，因为在所有引用中，可能会多次使用react和vue来开发程序。</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>&lt;script type=&quot;systemjs-importmap&quot;&gt;\n {\n   &quot;imports&quot;: {\n     &quot;single-spa&quot;: &quot;https://cdn.jsdelivr.net/npm/single-spa@5.9.0/lib/system/single-spa.min.js&quot;,\n     &quot;react&quot;: &quot;https://cdn.jsdelivr.net/npm/react@17.0.1/umd/react.production.min.js&quot;,\n     &quot;react-dom&quot;: &quot;https://cdn.jsdelivr.net/npm/react-dom@17.0.1/umd/react-dom.production.min.js&quot;,\n     &quot;react-router-dom&quot;: &quot;https://cdn.jsdelivr.net/npm/react-router-dom@5.2.0/umd/react-router-dom.min.js&quot;,\n     &quot;vue&quot;: &quot;https://cdn.jsdelivr.net/npm/vue@2.6.10/dist/vue.js&quot;,\n     &quot;vue-router&quot;: &quot;https://cdn.jsdelivr.net/npm/vue-router@3.0.7/dist/vue-router.min.js&quot;,\n   }\n }\n&lt;/script&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>这里是使用webpack将上述打包为<code>systemjs</code>， 在浏览器中加载。同理在微应用内的<code>webpack</code>配置中，就需要<code>externals</code>这些包</p><p>我们来看看创建后的引用的<code>root-config.js</code></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>/**\n * 1. name 微前端引用名称 &quot;@组织名称/应用名称&quot;\n * 2. app 函数类型，返回Promise 通过 systemjs 引用打包好的微前端应用模块代码 umd\n * 3. activeWhen 路由匹配时激活应用\n */\nregisterApplication({\n  name: &#39;@study/todos&#39;,\n  app: () =&gt; System.import(&#39;@study/todos&#39;),\n  activeWhen: [&#39;/todos&#39;],\n})\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>这里就是创建了一个名为<code>todos</code>的应用，并且在<code>@study</code>组织中。</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>&lt;script type=&quot;systemjs-importmap&quot;&gt;\n   {\n     &quot;imports&quot;: {\n       &quot;@study/todos&quot;: &quot;//localhost:9002/study-todos.js&quot;\n     }\n   }\n&lt;/script&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>唯一注意的一点，将端口在<code>package.json</code>切换。 在每一个微应用中，入口处可以创建用于观察应用启动、挂载和卸载的生命周期，这些生命周期必须返回promise</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>let lagouContainer = null\n  export const bootstrap = async function () {\n  console.log(&quot;应用正在启动&quot;)\n}\nexport const mount = async function () {\n  console.log(&quot;应用正在挂载&quot;)\n  lagouContainer = document.createElement(&quot;div&quot;)\n  lagouContainer.innerHTML = &quot;Hello Lagou&quot;\n  lagouContainer.id = &quot;lagouContainer&quot;\n  document.body.appendChild(lagouContainer)\n}\nexport const unmount = async function () {\n  console.log(&quot;应用正在卸载&quot;)\n  document.body.removeChild(lagouContainer)\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>这样就可以算是创建了多个应用，用于开发了。但是如何在多个应用内进行通讯呢。</p><h3 id="跨应用通信" tabindex="-1"><a class="header-anchor" href="#跨应用通信" aria-hidden="true">#</a> 跨应用通信</h3><blockquote><p>这里创建一个<code>tools</code>应用，专门用来放置跨应用共享的 JavaScript 逻辑，它也是独立的应用，需要单独构建单独启动。</p></blockquote><p>跨应用通信可以使用 RxJS，因为它无关于框架，也就是可以在任何其他框架中使用。</p><ol><li>在 index.ejs 文件中添加 rxjs 的 import-map</li></ol><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>{\n&quot;imports&quot;: {\n  &quot;rxjs&quot;: &quot;https://cdn.jsdelivr.net/npm/rxjs@6.6.3/bundles/rxjs.umd.min.js&quot;\n  }\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ol start="2"><li>在 utility modules 中导出一个 ReplaySubject，它可以广播历史消息，就算应用是动态加载进来 的，也可以接收到数据。</li></ol><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>import { ReplaySubject } from &quot;rxjs&quot;\nexport const sharedSubject = new ReplaySubject()\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ol start="3"><li>在 React 应用中订阅它</li></ol><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>useEffect(() =&gt; {\n  let subjection = null\n  if (toolsModule) {\n    subjection = toolsModule.sharedSubject.subscribe(console.log)\n  }\n  return () =&gt; subjection.unsubscribe()\n}, [toolsModule])\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ol start="4"><li>在 Vue 应用中订阅它</li></ol><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>async mounted() {\n  let toolsModule = await window.System.import(&quot;@study/tools&quot;)\n  toolsModule.sharedSubject.subscribe(console.log)\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="layout-engine" tabindex="-1"><a class="header-anchor" href="#layout-engine" aria-hidden="true">#</a> Layout Engine</h2><p>允许使用组件的方式声明顶层路由，并且提供了更加便捷的路由API用来注册应用。</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>&lt;template id=&quot;single-spa-layout&quot;&gt;\n   &lt;single-spa-router&gt;\n     &lt;nav class=&quot;topnav&quot;&gt;\n       &lt;application name=&quot;@study/nav&quot;&gt;&lt;/application&gt;\n     &lt;/nav&gt;\n     &lt;div class=&quot;main-content&quot;&gt;\n       &lt;route path=&quot;settings&quot;&gt;\n         &lt;application name=&quot;@study/settings&quot;&gt;&lt;/application&gt;\n       &lt;/route&gt;\n       &lt;route path=&quot;clients&quot;&gt;\n         &lt;application name=&quot;@study/clients&quot;&gt;&lt;/application&gt;\n       &lt;/route&gt;\n     &lt;/div&gt;\n     &lt;footer&gt;\n       &lt;application name=&quot;@study/footer&quot;&gt;&lt;/application&gt;\n     &lt;/footer&gt;\n   &lt;/single-spa-router&gt;\n&lt;/template&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>获取路由信息</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>import { registerApplication, start } from &#39;single-spa&#39;;\nimport {\n  constructApplications,\n  constructRoutes,\n  constructLayoutEngine,\n} from &#39;single-spa-layout&#39;;\n// 这里拿到的路由信息就是已经结构化好的，所以注册的方式就简便了\nconst routes = constructRoutes(document.querySelector(&#39;#single-spa-layout&#39;));\nconst applications = constructApplications({\n  routes,\n  loadApp({ name }) {\n    return System.import(name);\n  },\n});\nconst layoutEngine = constructLayoutEngine({ routes, applications });\napplications.forEach(registerApplication);\n\nstart();\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div>',50),t={},l=(0,s(3744).Z)(t,[["render",function(n,e){return a}]])},3744:(n,e)=>{e.Z=(n,e)=>{const s=n.__vccOpts||n;for(const[n,a]of e)s[n]=a;return s}}}]);