"use strict";(self.webpackChunkstudy_note=self.webpackChunkstudy_note||[]).push([[7156],{983:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-1bc00e0d",path:"/ts/challenge.html",title:"ts 类型挑战",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"初级",slug:"初级",children:[{level:3,title:"实现 Pick",slug:"实现-pick",children:[]},{level:3,title:"实现 readonly",slug:"实现-readonly",children:[]}]},{level:2,title:"元祖转换成对象",slug:"元祖转换成对象",children:[]}],filePathRelative:"ts/challenge.md",git:{updatedTime:164104785e4}}},2868:(n,s,a)=>{a.r(s),a.d(s,{default:()=>b});var e=a(6252);const p=(0,e._)("h1",{id:"ts-类型挑战",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#ts-类型挑战","aria-hidden":"true"},"#"),(0,e.Uk)(" ts 类型挑战")],-1),t=(0,e._)("p",null,[(0,e._)("code",null,"typescript"),(0,e.Uk)("的基础语法类型很简单，在写业务的时候几乎用不到它的类型定义。但是当要写一个提示友好的工具库的时候，他的类型定义变得非常重要。")],-1),o=(0,e.Uk)("在github上，"),l={href:"https://github.com/type-challenges/type-challenges",target:"_blank",rel:"noopener noreferrer"},c=(0,e.Uk)("type-challenges"),r=(0,e.Uk)("是专门用来深化对"),i=(0,e._)("code",null,"typescript",-1),k=(0,e.Uk)("的理解 我们来一步步挑战它"),u=(0,e.uE)('<h2 id="初级" tabindex="-1"><a class="header-anchor" href="#初级" aria-hidden="true">#</a> 初级</h2><h3 id="实现-pick" tabindex="-1"><a class="header-anchor" href="#实现-pick" aria-hidden="true">#</a> 实现 Pick</h3><p>题目</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Todo</span> <span class="token punctuation">{</span>\n  title<span class="token operator">:</span> <span class="token builtin">string</span>\n  description<span class="token operator">:</span> <span class="token builtin">string</span>\n  completed<span class="token operator">:</span> <span class="token builtin">boolean</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">type</span> <span class="token class-name">TodoPreview</span> <span class="token operator">=</span> MyPick<span class="token operator">&lt;</span>Todo<span class="token punctuation">,</span> <span class="token string">&#39;title&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;completed&#39;</span><span class="token operator">&gt;</span>\n\n<span class="token keyword">const</span> todo<span class="token operator">:</span> TodoPreview <span class="token operator">=</span> <span class="token punctuation">{</span>\n    title<span class="token operator">:</span> <span class="token string">&#39;Clean room&#39;</span><span class="token punctuation">,</span>\n    completed<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">MyPick<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">[</span>key <span class="token keyword">in</span> <span class="token constant">K</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>解析： 这里主要是使用了<code>keyof</code>获取了泛型 T 的 key，然后通过 <code>extends</code>约束 T 的值在 key 里面，最后通过 <code>in</code> 循环 k ，拿到 key ，这个 key 对应 T 内的值。</p><h3 id="实现-readonly" tabindex="-1"><a class="header-anchor" href="#实现-readonly" aria-hidden="true">#</a> 实现 readonly</h3><p>题目</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// 将所有属性转变为 只读</span>\n<span class="token keyword">interface</span> <span class="token class-name">Todo</span> <span class="token punctuation">{</span>\n  title<span class="token operator">:</span> <span class="token builtin">string</span>\n  description<span class="token operator">:</span> <span class="token builtin">string</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> todo<span class="token operator">:</span> MyReadonly<span class="token operator">&lt;</span>Todo<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  title<span class="token operator">:</span> <span class="token string">&quot;Hey&quot;</span><span class="token punctuation">,</span>\n  description<span class="token operator">:</span> <span class="token string">&quot;foobar&quot;</span>\n<span class="token punctuation">}</span>\n\ntodo<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">&quot;Hello&quot;</span> <span class="token comment">// Error: cannot reassign a readonly property</span>\ntodo<span class="token punctuation">.</span>description <span class="token operator">=</span> <span class="token string">&quot;barFoo&quot;</span> <span class="token comment">// Error: cannot reassign a readonly property</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">MyReadonly<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token keyword">readonly</span> <span class="token punctuation">[</span>key <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>解析</p><p>获取 T 的 key值，循环然后给key 添加 <code>readonly</code></p><h2 id="元祖转换成对象" tabindex="-1"><a class="header-anchor" href="#元祖转换成对象" aria-hidden="true">#</a> 元祖转换成对象</h2><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// 将元祖转换成对象</span>\n<span class="token keyword">const</span> tuple <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;tesla&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;model 3&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;model X&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;model Y&#39;</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token keyword">const</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">TupleToObject<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token keyword">readonly</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">[</span>key <span class="token keyword">in</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">:</span> key\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>',15),d={},b=(0,a(3744).Z)(d,[["render",function(n,s){const a=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.iD)(e.HY,null,[p,t,(0,e._)("p",null,[o,(0,e._)("a",l,[c,(0,e.Wm)(a)]),r,i,k]),u],64)}]])},3744:(n,s)=>{s.Z=(n,s)=>{for(const[a,e]of s)n[a]=e;return n}}}]);