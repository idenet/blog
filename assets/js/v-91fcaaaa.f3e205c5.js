"use strict";(self.webpackChunkstudy_note=self.webpackChunkstudy_note||[]).push([[666],{6165:(e,t,a)=>{a.r(t),a.d(t,{data:()=>i});const i={key:"v-91fcaaaa",path:"/nuxtJs/introduction/",title:"服务端渲染和单页应用",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[],filePathRelative:"nuxtJs/introduction/readme.md",git:{updatedTime:1634994397e3}}},5738:(e,t,a)=>{a.r(t),a.d(t,{default:()=>r});const i=(0,a(6252).uE)('<h1 id="服务端渲染和单页应用" tabindex="-1"><a class="header-anchor" href="#服务端渲染和单页应用" aria-hidden="true">#</a> 服务端渲染和单页应用</h1><p>服务端渲染有早先的php，jsp等，都是后端通过模板语言直接渲染页面，好处是一次页面请求就能拿到所有数据， 展现速度块。</p><p>单页应用，如vue、react等框架，解决了复杂场景下，前端的代码效率问题，降低了频繁操作dom的复杂度。但是因为要请求数据和js，渲染速度慢，且无法seo</p><p><strong>同构渲染</strong></p><p>基于React、Vue等框架，客户端渲染和服务端渲染的结合</p><ul><li>在服务器端执行一次，用于实现服务器渲染（首屏直出）</li><li>在客户端再执行一次，用于接管页面交互</li><li>核心解决seo和首屏渲染慢的问题</li><li>拥有传统服务端渲染的优点，也有客户端渲染的优点</li></ul><p>同构渲染的问题</p><ol><li>开发条件有限</li><li>更多服务端资源</li></ol><h1 id="nuxt" tabindex="-1"><a class="header-anchor" href="#nuxt" aria-hidden="true">#</a> Nuxt</h1><p>基于vue的同构渲染库</p>',10),n={},r=(0,a(3744).Z)(n,[["render",function(e,t){return i}]])},3744:(e,t)=>{t.Z=(e,t)=>{for(const[a,i]of t)e[a]=i;return e}}}]);